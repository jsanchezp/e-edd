package es.ucm.fdi.edd.core.xml;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

public class XMLParser {
	
	private Document document;

	public XMLParser(String urlPath) {
		try {
			URL url = new URL(urlPath);
			initialize(url.openConnection().getInputStream());
		} catch (MalformedURLException e) {
			System.out.println("Malformed URL Exception" + e.toString());
		} catch (IOException e) {
			System.out.println("IO Error" + e.toString());
		}
	}
	
	public XMLParser(File file) {
		try {
			initialize(new FileInputStream(file));
		} catch (FileNotFoundException e) {
			System.out.println("Error" + e.toString());
		}
	}

	public XMLParser(InputStream stream) {
		initialize(stream);
	}

	private void initialize(InputStream inputStream) {
		parseDOMXml(inputStream, false, false);
	}

	private void parseDOMXml(InputStream file, boolean validateDTD,
			boolean validateNamespace) {
		try {
			DocumentBuilderFactory domFactory = DocumentBuilderFactory
					.newInstance();
			domFactory.setValidating(validateDTD);
			domFactory.setNamespaceAware(validateNamespace);

			DocumentBuilder builder = domFactory.newDocumentBuilder();
			document = builder.parse(file);
		} catch (SAXParseException spe) {
			System.out.println("Parsing Error" + ", line " + spe.getLineNumber() + ", uri " + spe.getSystemId() + spe.getMessage());
		} catch (SAXException sxe) {
			System.out.println("Error" + "Error generated by this application (or a parser-initialization error)" + sxe.getMessage());
		} catch (ParserConfigurationException pce) {
			System.out.println("Configuration Exception Error" + "Parser with specified options can't be built " + pce.getMessage());
		} catch (IOException ioe) {
			System.out.println("I/O Error" + ioe.getMessage());
		}
	}

	/**
	 * Samples:
	 * 		"/ProsaXMLData/ProsaConfig/dependeDe/aplicacion/text()"
	 * 		"/classpath/classpathentry/@path"
	 * 		"/librerías/fichero"
	 * 		"/VersionesDesarrollo/descargables/version"
	 * 
	 * @param strXPath
	 * @return
	 * @throws XPathExpressionException
	 */
	public Object queryXPath(String strXPath) throws XPathExpressionException {
		XPathFactory factory = XPathFactory.newInstance();
		XPath xpath = factory.newXPath();
		XPathExpression expr = xpath.compile(strXPath);

		Object result = expr.evaluate(document, XPathConstants.NODESET);

		return result;
	}
	
	public Document getDocument() {
		return document;
	}
	
	public Element getRoot() {
		return document.getDocumentElement();
	}
	
	public String getAttribute(Node node, String attrName) {
		NamedNodeMap attributes = node.getAttributes();
		Node namedItem = attributes.getNamedItem(attrName);
		return namedItem.getNodeValue();
	}
	
	public Node getChildNode(Node parentNode, String tagChild) {
		NodeList childNodes = parentNode.getChildNodes();
		for (int i=0; i<childNodes.getLength(); i++) {
			Node child = childNodes.item(i);
			String name = child.getNodeName();
			if (name.equals(tagChild)) {
				return child;
			}
		}
			
		return null;
	}
	
	public String getChildNodeValue(Node parentNode, String tagChild) {
		NodeList childNodes = parentNode.getChildNodes();
		for (int i=0; i<childNodes.getLength(); i++) {
			Node child = childNodes.item(i);
			String name = child.getNodeName();
			if (name.equals(tagChild)) {
				return child.getFirstChild().getNodeValue();
			}
		}
			
		return null;
	}
	
	public String getImage(Node node) {
		String name = node.getNodeName();
		if (name.equalsIgnoreCase("content:encoded")) {
			String text = node.getFirstChild().getNodeValue();
			Pattern pattern = Pattern.compile(".*<img[^>]*src=\"([^\"]*)",Pattern.CASE_INSENSITIVE);
			Matcher matcher = pattern.matcher(text.toString());
			if (matcher.find()) {
				String image = matcher.group(1);
				return image;
			}
		}
		
		return null;		
	}
}
